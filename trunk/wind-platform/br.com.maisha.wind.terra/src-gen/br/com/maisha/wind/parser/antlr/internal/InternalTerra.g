/*
* generated by Xtext
*/
grammar InternalTerra;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.com.maisha.wind.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.com.maisha.wind.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.com.maisha.wind.services.TerraGrammarAccess;

}

@parser::members {

 	private TerraGrammarAccess grammarAccess;
 	
    public InternalTerraParser(TokenStream input, TerraGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DomainObject";	
   	}
   	
   	@Override
   	protected TerraGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainObject
entryRuleDomainObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainObjectRule()); }
	 iv_ruleDomainObject=ruleDomainObject 
	 { $current=$iv_ruleDomainObject.current; } 
	 EOF 
;

// Rule DomainObject
ruleDomainObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getDomainObjectAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>((
(
		{ 
	        newCompositeNode(grammarAccess.getDomainObjectAccess().getPackagePackageDeclarationParserRuleCall_0_0_0()); 
	    }
		lv_package_1_0=rulePackageDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainObjectRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_1_0, 
        		"PackageDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainObjectAccess().getImportsImportParserRuleCall_0_1_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainObjectRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='domain_object' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDomainObjectAccess().getDomain_objectKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainObjectAccess().getNameValidIDParserRuleCall_0_3_0()); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainObjectRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_label_5_0=RULE_STRING
		{
			newLeafNode(lv_label_5_0, grammarAccess.getDomainObjectAccess().getLabelSTRINGTerminalRuleCall_0_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_5_0, 
        		"STRING");
	    }

)
)	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDomainObjectAccess().getLeftCurlyBracketKeyword_0_5());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDomainObjectAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainObjectAccess().getPropertiesObjectPropertyParserRuleCall_1_0()); 
	    }
		lv_properties_7_0=ruleObjectProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainObjectRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_7_0, 
        		"ObjectProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDomainObjectAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 2);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainObjectAccess().getAttributesAttributeParserRuleCall_2_0()); 
	    }
		lv_attributes_8_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainObjectRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_8_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDomainObjectAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 3);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainObjectAccess().getOperationsOperationParserRuleCall_3_0()); 
	    }
		lv_operations_9_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainObjectRule());
	        }
       		add(
       			$current, 
       			"operations",
        		lv_operations_9_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDomainObjectAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDomainObjectAccess().getUnorderedGroup(), 4);
	 				}
					({true}?=>((
(
		{ 
	        newCompositeNode(grammarAccess.getDomainObjectAccess().getValidationsValidationParserRuleCall_4_0_0()); 
	    }
		lv_validations_10_0=ruleValidation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainObjectRule());
	        }
       		add(
       			$current, 
       			"validations",
        		lv_validations_10_0, 
        		"Validation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDomainObjectAccess().getRightCurlyBracketKeyword_4_1());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDomainObjectAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getDomainObjectAccess().getUnorderedGroup())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getDomainObjectAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleObjectProperty
entryRuleObjectProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectPropertyRule()); }
	 iv_ruleObjectProperty=ruleObjectProperty 
	 { $current=$iv_ruleObjectProperty.current; } 
	 EOF 
;

// Rule ObjectProperty
ruleObjectProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getObjectPropertyAccess().getNameObjectPropertyNameEnumRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleObjectPropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectPropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ObjectPropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectPropertyAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectPropertyAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectPropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getTypeValidIDParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getRefValidIDParserRuleCall_1_0()); 
	    }
		lv_ref_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getAttributeAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttributeAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getPropertiesAttributePropertyParserRuleCall_4_0()); 
	    }
		lv_properties_4_0=ruleAttributeProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"AttributeProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttributeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAttributeProperty
entryRuleAttributeProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributePropertyRule()); }
	 iv_ruleAttributeProperty=ruleAttributeProperty 
	 { $current=$iv_ruleAttributeProperty.current; } 
	 EOF 
;

// Rule AttributeProperty
ruleAttributeProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributePropertyAccess().getNameAttributePropertyNameEnumRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAttributePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributePropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"AttributePropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributePropertyAccess().getColonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributePropertyAccess().getValidValuesArrayParserRuleCall_2_0_0()); 
	    }
		lv_validValues_2_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributePropertyRule());
	        }
       		set(
       			$current, 
       			"validValues",
        		lv_validValues_2_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributePropertyAccess().getValueValueParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributePropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributePropertyAccess().getValueValueParserRuleCall_2_2_0_0()); 
	    }
		lv_value_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributePropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='using' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttributePropertyAccess().getUsingKeyword_2_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributePropertyAccess().getValidValuesArrayParserRuleCall_2_2_2_0()); 
	    }
		lv_validValues_6_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributePropertyRule());
	        }
       		set(
       			$current, 
       			"validValues",
        		lv_validValues_6_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getOperationKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getTypeOperationTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleOperationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"OperationType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getNameValidIDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_label_3_0=RULE_STRING
		{
			newLeafNode(lv_label_3_0, grammarAccess.getOperationAccess().getLabelSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getPropertiesOperationPropertyParserRuleCall_5_0()); 
	    }
		lv_properties_5_0=ruleOperationProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"OperationProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleOperationProperty
entryRuleOperationProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationPropertyRule()); }
	 iv_ruleOperationProperty=ruleOperationProperty 
	 { $current=$iv_ruleOperationProperty.current; } 
	 EOF 
;

// Rule OperationProperty
ruleOperationProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationPropertyAccess().getNameOperationPropertyNameEnumRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleOperationPropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationPropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"OperationPropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationPropertyAccess().getColonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationPropertyAccess().getValidValuesArrayParserRuleCall_2_0_0()); 
	    }
		lv_validValues_2_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationPropertyRule());
	        }
       		set(
       			$current, 
       			"validValues",
        		lv_validValues_2_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationPropertyAccess().getValueValueParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationPropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getFalseKeyword_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getValidIDParserRuleCall_3()); 
    }
    this_ValidID_3=ruleValidID    {
		$current.merge(this_ValidID_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_EXPRESSION_4=RULE_EXPRESSION    {
		$current.merge(this_EXPRESSION_4);
    }

    { 
    newLeafNode(this_EXPRESSION_4, grammarAccess.getValueAccess().getEXPRESSIONTerminalRuleCall_4()); 
    }

    |    this_NUMBER_5=RULE_NUMBER    {
		$current.merge(this_NUMBER_5);
    }

    { 
    newLeafNode(this_NUMBER_5, grammarAccess.getValueAccess().getNUMBERTerminalRuleCall_5()); 
    }

    |    this_PATH_6=RULE_PATH    {
		$current.merge(this_PATH_6);
    }

    { 
    newLeafNode(this_PATH_6, grammarAccess.getValueAccess().getPATHTerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRuleValidation
entryRuleValidation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidationRule()); }
	 iv_ruleValidation=ruleValidation 
	 { $current=$iv_ruleValidation.current; } 
	 EOF 
;

// Rule Validation
ruleValidation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='validation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValidationAccess().getValidationKeyword_0());
    }
(
(
		lv_ref_1_0=RULE_ID
		{
			newLeafNode(lv_ref_1_0, grammarAccess.getValidationAccess().getRefIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ref",
        		lv_ref_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValidationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValidationAccess().getRulesValidationRuleParserRuleCall_3_0()); 
	    }
		lv_rules_3_0=ruleValidationRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidationRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_3_0, 
        		"ValidationRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValidationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayAccess().getArrayAction_1(),
            $current);
    }
)(
(
		lv_values_2_0=RULE_STRING
		{
			newLeafNode(lv_values_2_0, grammarAccess.getArrayAccess().getValuesSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"STRING");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayAccess().getCommaKeyword_3_0());
    }
this_STRING_4=RULE_STRING
    { 
    newLeafNode(this_STRING_4, grammarAccess.getArrayAccess().getSTRINGTerminalRuleCall_3_1()); 
    }
)*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleValidationRule
entryRuleValidationRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidationRuleRule()); }
	 iv_ruleValidationRule=ruleValidationRule 
	 { $current=$iv_ruleValidationRule.current; } 
	 EOF 
;

// Rule ValidationRule
ruleValidationRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_messageKey_0_0=RULE_STRING
		{
			newLeafNode(lv_messageKey_0_0, grammarAccess.getValidationRuleAccess().getMessageKeySTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidationRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"messageKey",
        		lv_messageKey_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValidationRuleAccess().getColonKeyword_1());
    }
(
(
		lv_expression_2_0=RULE_EXPRESSION
		{
			newLeafNode(lv_expression_2_0, grammarAccess.getValidationRuleAccess().getExpressionEXPRESSIONTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidationRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"EXPRESSION");
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Rule OperationType
ruleOperationType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='groovy' 
	{
        $current = grammarAccess.getOperationTypeAccess().getGroovyEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperationTypeAccess().getGroovyEnumLiteralDeclaration()); 
    }
);





// Rule AttributePropertyName
ruleAttributePropertyName returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='x' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getXEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAttributePropertyNameAccess().getXEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='y' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAttributePropertyNameAccess().getYEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='colspan' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getColspanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAttributePropertyNameAccess().getColspanEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='rowspan' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getRowspanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAttributePropertyNameAccess().getRowspanEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='disabled' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getDisabledEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAttributePropertyNameAccess().getDisabledEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='icon' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getIconEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAttributePropertyNameAccess().getIconEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='width' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getWidthEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAttributePropertyNameAccess().getWidthEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='height' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getHeightEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAttributePropertyNameAccess().getHeightEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='tooltip' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getTooltipEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAttributePropertyNameAccess().getTooltipEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='group' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getGroupEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getAttributePropertyNameAccess().getGroupEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='visibleInEdition' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getVisibleInEditionEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getAttributePropertyNameAccess().getVisibleInEditionEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='visibleInGrid' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getVisibleInGridEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getAttributePropertyNameAccess().getVisibleInGridEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='content' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getContentEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getAttributePropertyNameAccess().getContentEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='value' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getValueEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getAttributePropertyNameAccess().getValueEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='validValues' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getValidValuesEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getAttributePropertyNameAccess().getValidValuesEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='validation' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getValidationEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getAttributePropertyNameAccess().getValidationEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='required' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getRequiredEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getAttributePropertyNameAccess().getRequiredEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='max_length' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getMax_lengthEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getAttributePropertyNameAccess().getMax_lengthEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='min_length' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getMin_lengthEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getAttributePropertyNameAccess().getMin_lengthEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='range' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getRangeEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getAttributePropertyNameAccess().getRangeEnumLiteralDeclaration_19()); 
    }
)
    |(	enumLiteral_20='mask' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getMaskEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getAttributePropertyNameAccess().getMaskEnumLiteralDeclaration_20()); 
    }
)
    |(	enumLiteral_21='event' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getEventEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getAttributePropertyNameAccess().getEventEnumLiteralDeclaration_21()); 
    }
)
    |(	enumLiteral_22='toString' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getToStringEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_22, grammarAccess.getAttributePropertyNameAccess().getToStringEnumLiteralDeclaration_22()); 
    }
)
    |(	enumLiteral_23='onetomany' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getOnetomanyEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_23, grammarAccess.getAttributePropertyNameAccess().getOnetomanyEnumLiteralDeclaration_23()); 
    }
)
    |(	enumLiteral_24='manytoone' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getManytooneEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_24, grammarAccess.getAttributePropertyNameAccess().getManytooneEnumLiteralDeclaration_24()); 
    }
)
    |(	enumLiteral_25='transient' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getTransientEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_25, grammarAccess.getAttributePropertyNameAccess().getTransientEnumLiteralDeclaration_25()); 
    }
)
    |(	enumLiteral_26='folder' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getFolderEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_26, grammarAccess.getAttributePropertyNameAccess().getFolderEnumLiteralDeclaration_26()); 
    }
)
    |(	enumLiteral_27='presentation_type' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getPresentation_typeEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_27, grammarAccess.getAttributePropertyNameAccess().getPresentation_typeEnumLiteralDeclaration_27()); 
    }
)
    |(	enumLiteral_28='sequence' 
	{
        $current = grammarAccess.getAttributePropertyNameAccess().getSequenceEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_28, grammarAccess.getAttributePropertyNameAccess().getSequenceEnumLiteralDeclaration_28()); 
    }
));



// Rule OperationPropertyName
ruleOperationPropertyName returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='disabled' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getDisabledEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperationPropertyNameAccess().getDisabledEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='icon' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getIconEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperationPropertyNameAccess().getIconEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='tooltip' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getTooltipEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperationPropertyNameAccess().getTooltipEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='visible' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getVisibleEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperationPropertyNameAccess().getVisibleEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='file' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getFileEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperationPropertyNameAccess().getFileEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='validWhen' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getValidWhenEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperationPropertyNameAccess().getValidWhenEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='is_filter' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getIs_filterEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getOperationPropertyNameAccess().getIs_filterEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='validate' 
	{
        $current = grammarAccess.getOperationPropertyNameAccess().getValidateEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getOperationPropertyNameAccess().getValidateEnumLiteralDeclaration_7()); 
    }
));



// Rule ObjectPropertyName
ruleObjectPropertyName returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='open_filtering' 
	{
        $current = grammarAccess.getObjectPropertyNameAccess().getOpen_filteringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getObjectPropertyNameAccess().getOpen_filteringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='event_handler' 
	{
        $current = grammarAccess.getObjectPropertyNameAccess().getEvent_handlerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getObjectPropertyNameAccess().getEvent_handlerEnumLiteralDeclaration_1()); 
    }
));



RULE_EXPRESSION : '${' ('a'..'z'|'A'..'Z'|'$'|'_'|'*'|'+'|'-'|'='|'/'|'0'..'9'|' '|'?'|':'|'('|')'|'<'|'>'|'.')* '}';

RULE_PATH : RULE_ID ('/' RULE_ID)+ '.' RULE_ID;

RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : '$$$don\'t use this anymore$$$';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


